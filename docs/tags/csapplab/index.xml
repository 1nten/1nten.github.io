<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSAPPLAB on intenのblog🍦</title>
    <link>https://inten.kro1lsec.com/tags/csapplab/</link>
    <description>Recent content in CSAPPLAB on intenのblog🍦</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 May 2021 15:07:34 +0800</lastBuildDate><atom:link href="https://inten.kro1lsec.com/tags/csapplab/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[CSAPPLAB]Attack Lab</title>
      <link>https://inten.kro1lsec.com/post/csapplabattack-lab/</link>
      <pubDate>Thu, 20 May 2021 15:07:34 +0800</pubDate>
      
      <guid>https://inten.kro1lsec.com/post/csapplabattack-lab/</guid>
      <description>ctarget 首先执行getbuf函数，读取标准输入。
unsigned getbuf() { char buf[BUFFER_SIZE]; Gets(buf); return 1; } 参数 (ctarget和rtarget都有) -q 不发送成绩 -i 从文件中输入 如果你没有使用-q，就会出现
FAILED: Initialization error: Running on an illegal host [localhost.localdomain] 因为你没有使用CMU的内网，是无法建立连接的。所以每次进行操作都要带上-q。也可以用qi。
1.1level 1 观察test，getbuf和touch1
目的：将getbuf的返回地址由test改为touch1
小建议
 利用objdump -d ./ctarget&amp;gt;&amp;gt;ctarget.s得到汇编代码 思路是将touch1的开始地址，放在某个位置，以实现当ret指令被getbuf执行后会将控制权转移给touch1 一定要注意字节序 你可以使用gdb设置断点来进行调试。并且gcc会影响栈帧中buf存放的位置。需要注意  思路：getbuf函数执行ret指令后，就会从%rsp+40处获取返回地址，只要我们修改这个返回地址，改为touch1的地址，就能使程序返回touch1，而不是test。
(gdb) p (char*)0x403188 #p(print) 0x403188上存的值 $1 = 0x403188 &amp;#34;No exploit. Getbuf returned 0x%x\n&amp;#34; stack : padding(00..) + touch1(0x4017c0)
攻击序列touch1.txt
00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c0 17 40 00 00 00 00 00 保存在touch1.</description>
    </item>
    
    <item>
      <title>[CSAPPLAB]Bomb Lab</title>
      <link>https://inten.kro1lsec.com/post/csapplabbomb-lab/</link>
      <pubDate>Thu, 15 Apr 2021 15:07:34 +0800</pubDate>
      
      <guid>https://inten.kro1lsec.com/post/csapplabbomb-lab/</guid>
      <description>总体感觉考查对汇编的理解和熟练度
phase_1 400e37: 48 89 c7 mov %rax,%rdi //第一个参数 400e3a: e8 a1 00 00 00 callq 400ee0 &amp;lt;phase_1&amp;gt;...0x0000000000400ee0 &amp;lt;+0&amp;gt;: sub $0x8,%rsp 0x0000000000400ee4 &amp;lt;+4&amp;gt;: mov $0x402400,%esi //第二个参数0x0000000000400ee9 &amp;lt;+9&amp;gt;: callq 0x401338 &amp;lt;strings_not_equal&amp;gt;让参数一，二相等即可
Border relations with Canada have never been better.
phase_2 利用callq 0x40145c &amp;lt;read_six_numbers&amp;gt;确定字符串格式，
利用0000000000400F1A add eax, eax让后边的数翻倍
字符串为“1 2 4 8 16 32”
phase_3 尝试分析时，发现jcc指令经常弄混，又回去复习了一遍
cmp oprd1,oprd2 + JNBE/JA 无符号cmp oprd1,oprd2 + JNLE/JG 有符号oprd1&amp;gt;oprd2时跳转JZ/JE 相等则跳转代码中0x402470+8*第一参数打印内存信息，可以看到相应的跳转地址，已经对应的eax值应该是多少，也就是第二数字的应该的取值。打印内存信息的命令行为jmp QWORD PTR [rax*8+0x402470]</description>
    </item>
    
    <item>
      <title>[CSAPPLAB]Data lab</title>
      <link>https://inten.kro1lsec.com/post/csapplabdata-lab/</link>
      <pubDate>Sun, 11 Apr 2021 15:07:34 +0800</pubDate>
      
      <guid>https://inten.kro1lsec.com/post/csapplabdata-lab/</guid>
      <description>前置知识 csapp第二章
位运算符
   运算符 描述 实例     &amp;amp; 按位与操作，按二进制位进行&amp;quot;与&amp;quot;运算。运算规则：0&amp;amp;0=0; 0&amp;amp;1=0; 1&amp;amp;0=0; 1&amp;amp;1=1; (A &amp;amp; B) 将得到 12，即为 0000 1100   | 按位或运算符，按二进制位进行&amp;quot;或&amp;quot;运算。运算规则：`0 0=0; 0   ^ 异或运算符，按二进制位进行&amp;quot;异或&amp;quot;运算。运算规则：0^0=0; 0^1=1; 1^0=1; 1^1=0; (A ^ B) 将得到 49，即为 0011 0001   ~ 取反运算符，按二进制位进行&amp;quot;取反&amp;quot;运算。运算规则：~1=-2; ~0=-1; (~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。   &amp;laquo; 二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。 A &amp;laquo; 2 将得到 240，即为 1111 0000   &amp;raquo; 二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。 A &amp;raquo; 2 将得到 15，即为 0000 1111    运算符的优先级</description>
    </item>
    
  </channel>
</rss>
