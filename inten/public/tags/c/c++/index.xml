<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C/C&#43;&#43; on intenのblog🍦</title>
    <link>https://1nten.github.io//tags/c/c&#43;&#43;/</link>
    <description>Recent content in C/C&#43;&#43; on intenのblog🍦</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://1nten.github.io//tags/c/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C/C&#43;&#43;基础</title>
      <link>https://1nten.github.io//post/%E5%9F%BA%E7%A1%80c/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://1nten.github.io//post/%E5%9F%BA%E7%A1%80c/</guid>
      <description>裸函数 void __declspec(naked) Function() //编译器不执行格外操作
{
__asm //在c中调用汇编格式__asm{}
{
ret } //需要手动写ret才能正常运行
}
常见的几种调用约定：
__cdecl:默认调用约定。外平栈。
__stdcall:内平栈。
__fastcall:2个参数以内时，直接用寄存器存取数据，提高执行速度。内平栈。
浮点数的存储 以12.5为例
符号部分：正数为0，负数为1
12=&amp;raquo; c =&amp;raquo; 1100
0.5 乘二取整 1.0 =&amp;raquo;1
12.5 =&amp;raquo; 1100.1 =&amp;raquo; 1.1001 * 10^3
尾数部分： 1001 0000000000000000000
指数部分：127 + 3 = 130 =&amp;raquo; 1000 0010 //127 + 指数计算即可
0 1000 0010 1001 0000000000000000000
内存图 全局变量&amp;amp;局部变量 mov [ arr (00427326)] ，eax //全局变量
mov dword ptr [ebp-4] , 6Ah //局部变量
mov dword ptr [ebp-8], 14h
全局变量</description>
    </item>
    
  </channel>
</rss>
