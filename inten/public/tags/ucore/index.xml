<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uCore on intenのblog🍦</title>
    <link>https://1nten.github.io//tags/ucore/</link>
    <description>Recent content in uCore on intenのblog🍦</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://1nten.github.io//tags/ucore/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[uCore]Lab1</title>
      <link>https://1nten.github.io//post/ucorelab1/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://1nten.github.io//post/ucorelab1/</guid>
      <description>练习1 练习指南
操作系统镜像文件 ucore.img 是如何一步一步生成的?(需要比较详细地解释 Makefile 中每一条相关命令和命令参数的含义,以及说明命令导致的结果)
 设置了项目名称，EMPTY，SPACE，SLASH等，变量V设置是为了进行打印. 设置GCCPRETIX和QEMU，检查是否支持32位的elf文件。 配置 USELLVM include tools/function.mk,包含一个已经已经封装好函数的文件，下文大量调用。 为了生成ucore.img，首先需要生成kernel、bootblock 为了生成kernel，首先需要 kernel.ld init.o readline.o stdio.o kdebug.o kmonitor.o panic.o clock.o console.o intr.o picirq.o trap.o trapentry.o vectors.o pmm.o printfmt.o string.o 为了生成bootblock，首先需要生成bootasm.o、bootmain.o、sign sign的作用是先检测bootblock的大小要小于500，然后在最后增加0x55, 0xaa的标识位， 然后复制到对应目录。 ucore.img使用dd指令将对应的文件合并 最后配置target  all: 对应直接使用make的时候，就是编译出ucore.img，
lab1-mon使用qemu的monitor模式保存log记录，并运行一个gdb进行调试
debug-mon: 使用qemu的monitor和gdb配合调试
qemu: 使用qemu混合模式
qemu-mon:使用qemu monitor模式
qemu-nox:使用qemu 命令行模式
一个被系统认为是符合规范的硬盘主引导扇区的特征是什么?
从/tool/sign.c的代码来看，一个磁盘主引导扇区只有512字节。且 第510个（倒数第二个）字节是0x55， 第511个（倒数第一个）字节是0xAA。
练习2 使用qemu执行并调试lab1中的软件。
单步调试和查看BIOS代码
修改tools/gdbinit为
file obj/bootblock.o set architecture i8086 target remote :1234 b* 0x7c00 #强制反汇编当前的指令 define hook-stop x/i $eip end continue   gdb脚本中的define hook-stop .</description>
    </item>
    
    <item>
      <title>操作系统真象还原笔记</title>
      <link>https://1nten.github.io//post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9C%9F%E8%B1%A1%E8%BF%98%E5%8E%9F%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://1nten.github.io//post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9C%9F%E8%B1%A1%E8%BF%98%E5%8E%9F%E7%AC%94%E8%AE%B0/</guid>
      <description>01操作系统是是什么 社会组织和人们之间的关系，正是操作系统和用户进程的关系
当人们想和远方的朋友说话时，虽然可以徒步走到亲朋好友身边再对其表达想说的话，但社会组织 已经给提供了邮局和电话，何必自己再大老远跑一趟呢。这就是操作系统（社会组织）提供的资源。两 个人想在一起生活，要不要一定先结婚呢？完全不用，领不领证都不会阻碍人们在一起生活，但是社会 组织为了方便人口管理做了额外约束。不领证的话，至少社会组织无法预测未来人口数量趋势，无法做 出宏观调控，甚至这是找到你家人的一种方法。这就如 Linux 系统中的内存管理，分别要记录哪些页是 Active，哪些是“脏页“。不记录不会影响程序执行，记录这些状态还不是为了更好地管理 内存。
03写操作系统，哪些需要我来做 操作系统是管理资源的软件，操作系统能做什么，取决于主机上硬件的功能。
写操作系统需要了解硬件，这些硬件提供了软件方面的接口，这样我们的操作系统通过软件（计算机指令〉就能够控制硬件。我们需要做的就是知道如何通过计算机指令来控制硬件，参考硬件手册这下少不了啦。
04软件是如何访问硬件的 各种硬件适配设备，这就是 IO 接口。接口其实就是标准，大家生产出来的硬件按照这个标准工作就实现了通用。
访问外部硬件有两个方式。
（1）将某个外设的内存映射到一定范围的地址空间中， CPU 通过地址总线访问该内存区域时会落到外设的内存中，这种映射让 CPU 访问外设的内存就如同访问主板上的物理内存一样。有的设备是这样做的，比如显卡，显卡是显示器的适配器， CPU 不直接和显示器交互，它只和显卡通信。显卡上有片内存叫显存，它被映射到主机物理内存上的低端 lMB 的0xB8000～0xBFFFF。CPU 访问这片内存就是访问显存，住这片内存上写字节便是往屏幕上打印内容。
(2)外设是通过 IO 接口与 CPU 通信的， CPU 访问外设，就是访问 IO 接口，由 IO 接口将信息传递 给另一端的外设，也就是说， CPU 从来不知道有这些设备的存在，它只知道自己操作的 IO 接口，你看， 处处体现着分层。 于是问题来了，如何访问到 IO 接口呢，答案就是 IO 接口上面有一些寄存器，访问 IO 接口本质上就是 访问这些寄存器，这些寄存器就是人们常说的端口。这些端口是人家 IO 接口给咱们提供的接口 。 人家接口 电路也有自己的思维（系统），看到寄存器中写了什么就做出相应的反应。接口提供接口，哈哈，有意思。 不过这是人家的约定，没有约定就乱了，各干各的，大家都累，咱们只要遵循人家的规定就能访问成功。
05应用程序是什么，和操作系统是如何配合到一起的 应用程序和操作系统都是软件。 CPU 会将它们一视同仁，甚至， CPU 不知道自己在执行的程序是操作系统，还是一般应用软件， CPU 只知道去 CS: ip 寄存器中指向的内 存取指令井执行，它不知道什么是操作系统，也无需知道。</description>
    </item>
    
    <item>
      <title>[uCore]Lab0</title>
      <link>https://1nten.github.io//post/ucorelab0/</link>
      <pubDate>Sun, 06 Jun 2021 15:07:34 +0800</pubDate>
      
      <guid>https://1nten.github.io//post/ucorelab0/</guid>
      <description>gcc #安装
sudo apt-get install build-essential
#编译
$ gcc -Wall hello.c -o hello
该命令将文件‘hello.c’中的代码编译为机器码并存储在可执行文件 ‘hello’中。机器码的文件名是通过 -o 选项指定的。该选项通常作为命令行中的最后一个参数。如果被省略，输出文件默认为 ‘a.out’。
选项 -Wall 开启编译器几乎所有常用的警告，默认情况下GCC 不会产生任何警告信息。
AT&amp;amp;T汇编基本语法 Ucore中用到的是AT&amp;amp;T格式的汇编，与Intel格式的汇编有一些不同。二者语法上主要有以下几个不同：
* 寄存器命名原则
AT&amp;amp;T: %eax Intel: eax
* 源/目的操作数顺序 AT&amp;amp;T: movl %eax, %ebx Intel: mov ebx, eax
* 常数/立即数的格式　AT&amp;amp;T: movl $_value, %ebx Intel: mov eax, _value
把value的地址放入eax寄存器
AT&amp;amp;T: movl $0xd00d, %ebx Intel: mov ebx, 0xd00d
* 操作数长度标识 AT&amp;amp;T: movw %ax, %bx Intel: mov bx, ax
* 寻址方式 AT&amp;amp;T: immed32(basepointer, indexpointer, indexscale)
Intel: [basepointer + indexpointer × indexscale + imm32)
如果操作系统工作于保护模式下，用的是32位线性地址，所以在计算地址时不用考虑segment:offset的问题。上式中的地址应为：</description>
    </item>
    
  </channel>
</rss>
